{"version":3,"sources":["trash.png","logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listItems","items","map","item","className","key","text","src","img","onClick","deleteItem","duration","easing","App","handleInput","e","setState","currentItem","target","value","Date","now","addItem","preventDefault","newItem","state","console","log","newItems","itemfilter","filter","onSubmit","this","type","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,mC,0ECA3CD,EAAOC,QAAU,IAA0B,kC,kMC2B5BC,MAtBf,SAAmBC,GACf,IAAMC,EAAYD,EAAME,MAAMC,KAAI,SAAAC,GAC/B,OACA,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC7B,+BAAKF,EAAKG,KACV,yBAAKC,IAAKC,IACVJ,UAAU,MACVK,QAAS,kBAAKV,EAAMW,WAAWP,EAAKE,aAM1C,OACI,6BACI,kBAAC,IAAD,CAAUM,SAAS,MAAMC,OAAO,eAC1BZ,KC0CHa,E,kDAzDb,WAAYd,GAAO,IAAD,8BAChB,cAAMA,IASRe,YAAc,SAAAC,GACZ,EAAKC,SAAS,CACZC,YAAY,CACVX,KAAKS,EAAEG,OAAOC,MACdd,IAAIe,KAAKC,UAdG,EAkBlBC,QAAU,SAAAP,GACRA,EAAEQ,iBACF,IAAIC,EAAU,EAAKC,MAAMR,YACzB,GAAoB,KAAjBO,EAAQlB,KAAY,CACrBoB,QAAQC,IAAIH,GACZ,IAAMI,EAAQ,sBAAM,EAAKH,MAAMxB,OAAjB,CAAyBuB,IACvC,EAAKR,SAAS,CACZf,MAAM2B,EACNX,YAAY,CACVX,KAAK,GACLD,IAAI,QA5BM,EAiClBK,WAAa,SAACL,GACV,IAAMwB,EAAa,EAAKJ,MAAMxB,MAAM6B,QAAO,SAAA3B,GAAI,OAAEA,EAAKE,MAAMA,KAC5D,EAAKW,SAAS,CACZf,MAAM4B,KAlCV,EAAKJ,MAAO,CACVxB,MAAM,GACNgB,YAAY,CACVX,KAAK,GACLD,IAAI,KANQ,E,qDAwChB,OACE,yBAAKD,UAAU,OACb,0BAAM2B,SAAUC,KAAKV,SACnB,2BAAOW,KAAK,OACXC,YAAY,aACZf,MAAOa,KAAKP,MAAMR,YAAYX,KAC9B6B,SAAUH,KAAKlB,cAChB,0CAGF,kBAAC,EAAD,CAAWb,MAAO+B,KAAKP,MAAMxB,MAC7BS,WAAYsB,KAAKtB,kB,GApDP0B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.5ea92e15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash.2c3e6019.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './ListItems.css'\nimport img from './trash.png'\nimport FlipMove from 'react-flip-move';\n\nfunction ListItems(props){\n    const listItems = props.items.map(item=>{\n       return(\n       <div className=\"item\" key={item.key}>\n          <p> {item.text} \n          <img src={img} \n          className=\"img\" \n          onClick={()=> props.deleteItem(item.key)}/>\n          </p>\n          \n       </div>\n       )\n    })\n    return(\n        <div>\n            <FlipMove duration=\"500\" easing=\"ease-in-out\">\n                 {listItems}\n            </FlipMove>\n           \n        </div>\n    )\n}\nexport default ListItems","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems'\nimport FlipMove from 'react-flip-move';\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state ={\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n  }\n  handleInput = e =>{\n    this.setState({\n      currentItem:{\n        text:e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n  addItem = e =>{\n    e.preventDefault()\n    let newItem = this.state.currentItem\n    if(newItem.text !== \"\"){\n      console.log(newItem)\n      const newItems =[...this.state.items , newItem]\n      this.setState({\n        items:newItems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n    }\n  }\n  deleteItem = (key)=>{\n      const itemfilter = this.state.items.filter(item=>item.key!==key)\n      this.setState({\n        items:itemfilter\n      })\n  }\n  render(){\n    return(\n      <div className='App'>\n        <form onSubmit={this.addItem}>\n          <input type=\"text\"\n           placeholder=\"Enter text\"\n           value={this.state.currentItem.text}\n           onChange={this.handleInput}/>\n          <button>Enter</button>\n          \n        </form>\n        <ListItems items={this.state.items} \n        deleteItem={this.deleteItem}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}